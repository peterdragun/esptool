name: Build esptool

on: [push, pull_request]

jobs:
  build-esptool-binaries:
    name: Build esptool binaries for ${{ matrix.platform }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform: [windows, linux-amd64, macos-amd64, macos-arm64, linux-armv7, linux-aarch64]
        include:
        - platform: windows
          TARGET: windows-amd64
          EXTEN: .exe
          SEPARATOR: ';'
        - platform: linux-amd64
          runner: ubuntu-22.04
          target: linux-amd64
        - platform: macos-amd64
          runner: macos-13  # Intel-based
          target: macos-amd64
        - platform: macos-arm64
          runner: macos-latest  # ARM-based
          target: macos-arm64
        - platform: linux-armv7
          runner: ubuntu-latest
          target: armv7
        - platform: linux-aarch64
          runner: ubuntu-latest
          target: aarch64
    env:
      DISTPATH: esptool-${{ matrix.target }}
      STUBS_DIR: ./esptool/targets/stub_flasher/
      EFUSE_DIR: ./espefuse/efuse_defs/
      PIP_EXTRA_INDEX_URL: "https://dl.espressif.com/pypi"
    steps:
      - name: Checkout repository
        uses: actions/checkout@master

      - name: Set up Python 3.11
        if: ${{ !startsWith(matrix.platform, 'linux-arm') }}
        uses: actions/setup-python@master
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install nuitka
          pip install --user -e .
      - name: Patch version for dev releases
        if: contains(github.ref_name, 'dev')
        run: |
          echo "Patching version for dev release: ${{ github.ref_name }}"
          python ci/patch_dev_release.py --version ${{ github.ref_name }} esptool/__init__.py
          git diff
      - name: Build with Nuitka
        uses: ./.github/actions/nuitka-build-multiarch
        with:
          python-files: 'esptool.py espefuse.py espsecure.py esp_rfc2217_server.py'
          output-dir: ./${{ env.DISTPATH }}
          include-data-dirs: |
            [
              {"src": "${{ env.STUBS_DIR }}1", "dest": "${{ env.STUBS_DIR }}1"},
              {"src": "${{ env.STUBS_DIR }}2", "dest": "${{ env.STUBS_DIR }}2"},
              {"src": "${{ env.EFUSE_DIR }}", "dest": "${{ env.EFUSE_DIR }}"}
            ]
          icon-file: ${{ matrix.platform == 'windows' && 'ci/espressif.ico' || '' }}
          target-platform: ${{ matrix.platform }}
          pip-extra-index-url: ${{ env.PIP_EXTRA_INDEX_URL }}
          install-deps-command: 'python -m pip install --upgrade pip && pip install --user -e .'
          additional-packages: ${{ startsWith(matrix.platform, 'linux-arm') && 'build-essential' || '' }}

      - name: Sign binaries
        if: matrix.platform == 'windows' && github.event_name != 'pull_request' && github.repository == 'espressif/esptool'
        env:
          CERTIFICATE: ${{ secrets.CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        shell: pwsh
        run: |
          ./ci/Sign-File.ps1 -Path ./${{ env.DISTPATH }}/esptool.exe
          ./ci/Sign-File.ps1 -Path ./${{ env.DISTPATH }}/espefuse.exe
          ./ci/Sign-File.ps1 -Path ./${{ env.DISTPATH }}/espsecure.exe
          ./ci/Sign-File.ps1 -Path ./${{ env.DISTPATH }}/esp_rfc2217_server.exe

      - name: Add license and readme
        shell: bash
        run: mv LICENSE README.md ./${{ env.DISTPATH }}

      - name: Archive artifact
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.DISTPATH }}
          path: ${{ env.DISTPATH }}

  create_release:
    name: Create GitHub release
    if: startsWith(github.ref, 'refs/tags/') && !(contains(github.ref_name, 'dev'))
    needs: [build-esptool-binaries]
    runs-on: ubuntu-latest
    env:
      PIP_EXTRA_INDEX_URL: "https://dl.espressif.com/pypi"
    permissions:
      contents: write
    steps:
      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        shell: bash
      - name: Checkout
        uses: actions/checkout@master
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --user -e ".[dev]"
      - name: Generate changelog
        run: |
          cz changelog ${{ steps.get_version.outputs.VERSION }} --template ci/gh_changelog_template.md.j2 --file-name changelog_body.md
          cat changelog_body.md
      - name: Download built binaries
        uses: actions/download-artifact@master
      - name: Compress and rename binaries
        run: |
          for dir in esptool-*; do
            if [[ "$dir" == esptool-win* ]]; then
              zip -r "esptool-v${{ steps.get_version.outputs.VERSION }}-${dir#esptool-}.zip" "$dir"
            else
              chmod -R u=rwx,g=rx,o=rx "$dir"
              tar -cvzf "esptool-v${{ steps.get_version.outputs.VERSION }}-${dir#esptool-}.tar.gz" "$dir"
            fi
          done
      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body_path: changelog_body.md
          name: Version ${{ steps.get_version.outputs.VERSION }}
          draft: true
          prerelease: false
          files: |
            esptool-v${{ steps.get_version.outputs.VERSION }}-*.zip
            esptool-v${{ steps.get_version.outputs.VERSION }}-*.tar.gz
