name: 'Nuitka Build'
description: 'Build Python applications into standalone executables using Nuitka'
inputs:
  python-files:
    description: 'Space-separated list of Python files to build'
    required: true
  output-dir:
    description: 'Output directory for built executables'
    required: true
  include-data-dirs:
    description: 'JSON array of data directories to include (e.g. [{"src": "./data", "dest": "./data"}])'
    required: false
    default: '[]'
  icon-file:
    description: 'Path to icon file (Windows only)'
    required: false
    default: ''
  platform:
    description: 'Target platform (windows, linux, macos)'
    required: true
  python-version:
    description: 'Python version to use'
    required: false
    default: '3.11'
  nuitka-version:
    description: 'Nuitka version to install'
    required: false
    default: 'latest'
  additional-args:
    description: 'Additional Nuitka arguments'
    required: false
    default: ''
  file-extension:
    description: 'File extension for executables'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Install Nuitka
      shell: bash
      run: |
        if [ "${{ inputs.nuitka-version }}" = "latest" ]; then
          python -m pip install nuitka
        else
          python -m pip install nuitka==${{ inputs.nuitka-version }}
        fi

    - name: Build with Nuitka
      shell: bash
      run: |
        # Parse include-data-dirs JSON
        include_dirs='${{ inputs.include-data-dirs }}'

        # Build each Python file
        for file in ${{ inputs.python-files }}; do
          echo "Building $file..."

          # Start building the command
          cmd="python -m nuitka --onefile --output-dir=${{ inputs.output-dir }}"

          # Add icon for Windows
          if [[ "${{ inputs.platform }}" == "windows" && -n "${{ inputs.icon-file }}" ]]; then
            cmd="$cmd --windows-icon-from-ico=${{ inputs.icon-file }}"
          fi

          # Add include-data-dirs
          if [[ "$include_dirs" != "[]" ]]; then
            echo "$include_dirs" | python3 -c "
import sys, json
data = json.load(sys.stdin)
for item in data:
    print(f'--include-data-dir={item[\"src\"]}={item[\"dest\"]}', end=' ')
" | while read -r flags; do
              cmd="$cmd $flags"
            done
          fi

          # Add additional arguments
          if [[ -n "${{ inputs.additional-args }}" ]]; then
            cmd="$cmd ${{ inputs.additional-args }}"
          fi

          # Add the file to build
          cmd="$cmd $file"

          echo "Executing: $cmd"
          eval $cmd
        done

    - name: Verify builds
      shell: bash
      run: |
        echo "Verifying built executables..."
        for file in ${{ inputs.python-files }}; do
          base_name=$(basename "$file" .py)
          executable="${{ inputs.output-dir }}/${base_name}${{ inputs.file-extension }}"

          if [[ -f "$executable" ]]; then
            echo "✓ $executable exists"
            # Test that it runs
            "$executable" --help > /dev/null 2>&1 && echo "✓ $executable runs successfully" || echo "⚠ $executable may have issues"
          else
            echo "✗ $executable not found"
            exit 1
          fi
        done
